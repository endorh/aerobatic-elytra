// Build script dependencies
buildscript {
	repositories {
		maven {
			url = 'https://files.minecraftforge.net/maven'
		}
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}

// Plugins
plugins {
	id 'java'
	id 'maven-publish'
	// id "com.github.johnrengelman.shadow" version "6.1.0"
}
apply plugin: 'net.minecraftforge.gradle'

//apply plugin: 'maven-publish'

// Mod info -----------------------------------------------------------------------

def mod_id = "aerobatic-elytra"
group = "endorh.aerobatic_elytra"
def group_slashed = project.group.replaceAll("\\.", "/"),
	classname = "AerobaticElytra"

// Attributes
def display_name = "Aerobatic Elytra",
	vendor = "Endor H",
	credits = "",
	authors = "Endor H",
	issue_tracker = "",
	page = "",
	update_json = "",
	logo_file = "${mod_id}.png",
	description = '''
Adds an special elytra able to roll, fly and leave a trail, like an aerobatic plane.
All recipes and elytra upgrades can be modified by datapacks with great flexibility.
Other mods may register their own flight modes for the elytra.
'''

// License
def license = "LGPL"

// Versions
version = "0.2.17"

// Dependencies
def mc_version = "1.16.5",
	forge = "36.1.0",
	forge_version = "${mc_version}-${forge}",
	mixin_version = "0.8.2",
	minimal_mixin_version = "0.7.10",
	flight_core_version = "0.1.+",
	simple_config_version = "0.2.+",
	endorh_util_version = "0.2.+"

// Integration
def jei_version = "7.6.1.75",
	curios_version = "1.16.5-4.0.5.0",
	caelus_version = "1.16.5-2.1.3.0"
//noinspection GroovyUnusedAssignment
def curious_elytra_version = "317716:3231248",
	customizable_elytra_version = "440047:3248968",
	colytra_version = "280200:3113926",
	bookshelf_version = "228525:3241077",
	additional_banners_version = "230137:3170181",
	tabula_version = "229092:3274999",
	ichun_utils_version = "229060:3274982",
    placebo_version = "283644:3331459",
	xaeros_worldmap_version = "317780:3375878",
	xaeros_minimap_version = "263420:3375900",
	immersive_portals_version = "355440:3215256",
	aerobatic_elytra_jetpack_version = "0.2.+"

// Jar attributes
archivesBaseName = "${mod_id}-${mc_version}"

def jar_attributes = [
	"Specification-Title"     : "${mod_id}",
	"Specification-Vendor"    : "${vendor}",
	"Specification-Version"   : "1",
	"Implementation-Title"    : project.name,
	"Implementation-Version"  : "${version}",
	"Implementation-Vendor"   : "${vendor}",
	"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
	//"FMLCorePluginContainsFMLMod": "true",
	"Maven-Artifact"          : "${group}:${mod_id}:${version}"
]

def mod_properties = [
	modid: mod_id,
	display: display_name,
	version: project.version,
	mcversion: mc_version,
	mixinver: mixin_version,
	minmixin: minimal_mixin_version,
	vendor: vendor,
	authors: authors,
	credits: credits,
	license: license,
	page: page,
	issue_tracker: issue_tracker,
	update_json: update_json,
	logo_file: logo_file,
	description: description,
	group: group,
	class_name: classname,
	group_slashed: group_slashed
]

// Java options -------------------------------------------------------------------

// Java version
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'
compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = 'UTF-8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

java {
	withSourcesJar()
	// withJavadocJar()
}

// Minecraft options --------------------------------------------------------------

minecraft {
	mappings channel: 'snapshot', version: '20201028-1.16.3'
	//mappings channel: 'official', version: '1.16.5'
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	//accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		client {
			//noinspection GroovyAssignabilityCheck
			workingDirectory project.file('run')
			//arg "-mixin.config=" + "mixins." + "${mod_id}".toString() + ".json"
			jvmArg "-Dmixin.env.disableRefMap=true"

			// Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			mods {
				aerobatic_elytra {
					//noinspection GroovyAssignabilityCheck
					source sourceSets.main
				}
			}
		}

		server {
			//noinspection GroovyAssignabilityCheck
			workingDirectory project.file('run')
			//arg "-mixin.config=" + "mixins." + "${mod_id}".toString() + ".json"
			jvmArg "-Dmixin.env.disableRefMap=true"

			// Allowed flags: SCAN, REGISTRIES, REGISTRYDUMP
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			mods {
				aerobatic_elytra {
					//noinspection GroovyAssignabilityCheck
					source sourceSets.main
				}
			}
		}
	}
}

// Project dependencies -----------------------------------------------------------

repositories {
	maven {
		name = "Progwml6 maven" // JEI
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		name = "ModMaven" // JEI fallback
		url = "https://modmaven.k-4u.nl"
	}
	maven {
		name = "TheIllusiveC4" // Curios API
		url = "https://maven.theillusivec4.top/"
	}
	maven {
		name = "Curse Maven" // Curse Maven
		url = "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		// Local repository shared by different mods to test changes across dependencies
		name "LocalMods"
		url "${project.projectDir.parentFile.toURI()}maven"
	}
	maven {
		url 'https://repo.maven.apache.org/maven2'
		name 'Maven Central'
	}
}

configurations {
	embed // dependency mods included in the jar
	embed.transitive false
	compileOnly.extendsFrom(embed)
}

dependencies {
	// IDEÎµ
    implementation 'org.junit.jupiter:junit-jupiter:5.8.2'
	implementation 'org.jetbrains:annotations:23.0.0'

	// Minecraft
    minecraft "net.minecraftforge:forge:${forge_version}"

	// Mod dependencies
	// Flight Core
	// TODO: Replace with curse maven or GitHub maven once published
	embed fg.deobf("endorh.flight_core:flight-core:${flight_core_version}")
	runtimeOnly fg.deobf("endorh.flight_core:flight-core:${flight_core_version}")

	// Simple Config
	embed fg.deobf("endorh.simple_config:simple-config:${simple_config_version}")
	runtimeOnly fg.deobf("endorh.simple_config:simple-config:${simple_config_version}")

	// Endor8 Util
	embed fg.deobf("endorh.util:endor-util:${endorh_util_version}")
	runtimeOnly fg.deobf("endorh.util:endor-util:${endorh_util_version}")

	// Mod integrations
	// JEI
	// FIXME: Accidental runtime dependency on JEI
	compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
	runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")

	// Curios API
	compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}:api")
	runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")

	// Caelus API
	compileOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}:api")
	runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:${caelus_version}")

	// Used for debug
	// Aerobatic Elytra Jetpack
	runtimeOnly fg.deobf("endorh.aerobatic_elytra.jetpack:aerobatic-elytra-jetpack:${aerobatic_elytra_jetpack_version}")

	// Curious Elytra
	runtimeOnly fg.deobf("curse.maven:curiouselytra-${curious_elytra_version}")

	// Colytra
	runtimeOnly fg.deobf("curse.maven:colytra-${colytra_version}")

	// Customizable Elytra
	runtimeOnly fg.deobf("curse.maven:customizableelytra-${customizable_elytra_version}")

	// Additional Banners
	// runtimeOnly "curse.maven:bookshelf-${bookshelf_version}:deobf"
	// runtimeOnly "curse.maven:additionalbanners-${additional_banners_version}:deobf"

	// Placebo (solved an odd class-loading order bug related to SimpleConfig, not needed anymore)
	runtimeOnly fg.deobf("curse.maven:placebo-${placebo_version}")

	// Xaero's World Map
	// runtimeOnly fg.deobf("curse.maven:xaeros-worldmap-${xaeros_worldmap_version}")

	// Xaero's Minimap (waypoints are rendered out of place ingame when rolling)
	// runtimeOnly fg.deobf("curse.maven:xaeros-minimap-${xaeros_minimap_version}")

	// Immersive Portals (untestable in an unobfuscated environment, crashes without refmaps)
	//   Portals with rotation override roll with a fixed animation that is sometimes in the wrong axis
	//   Wings of players in the portal frontier bind the wrong texture when rendering
	// runtimeOnly fg.deobf("curse.maven:immersive-portals-${immersive_portals_version}")

	// Tabula (breaks the menu, so it's disabled unless needed)
	// runtimeOnly fg.deobf("curse.maven:tabula-${tabula_version}")
	// runtimeOnly fg.deobf("curse.maven:ichunutils-${ichun_utils_version}")
}

// Tasks --------------------------------------------------------------------------

test {
	useJUnitPlatform()
}

classes.dependsOn extractNatives // Make sure the natives are extracted on compile

// Jar attributes
jar {
	// into('/META-INF/dependencies') {
	// 	from configurations.embed
	// 	from "${buildDir}/dependencyMeta/"
	// }
	manifest {
		attributes(jar_attributes)
		// attributes 'ContainedMods': configurations.embed.collect { it.name }.join(' ')
	}

	finalizedBy 'reobfJar'
}

task deobfJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("deobf")
	from sourceSets.main.output
	manifest {
		attributes(jar_attributes)
		attributes 'Maven-Artifact': "${group}:${mod_id}:${project.version}:deobf"
	}
}

// Process resources
processResources {
	inputs.properties mod_properties
	duplicatesStrategy DuplicatesStrategy.INCLUDE

	// Exclude development files
	exclude("**/.dev/**")
	from(sourceSets.main.resources.srcDirs) {
		//noinspection GroovyAssignabilityCheck
		filesMatching(["**/*.toml", "**/*.mcmeta"]) {
			expand mod_properties
		}
		filesMatching("**/*.json") {
			if (!getPath().contains("/lang/"))
				expand mod_properties
		}
	}
}

// Make the clean task remove the run and logs folder
clean {
	delete "run"
	delete "logs"
}

task saveMods (type: Copy) {
	from 'run\\mods'
	into 'saves\\mods'
}

clean.dependsOn saveMods

task setupMinecraft (type: Copy) {
	from 'saves'
	into 'run'
}

clean.finalizedBy setupMinecraft

task cleanBuildAssets (type: Delete) {
	println "> Task :cleanBuildAssets"
	delete "build\\resources\\main\\assets"
}

build.dependsOn cleanBuildAssets

// Clean all files
task cleanAll (type: Delete) {
	delete ".factorypath"
	delete "Patches"
}
cleanAll.finalizedBy clean

// Publishing
publishing {
	publications {
		mod(MavenPublication) {
			artifact jar
			artifact sourcesJar

			pom {
				name = display_name
				properties = [
					description: description
				]
				url = page
			}
		}
	}
	repositories {
		maven {
			name "LocalMods"
			url "${project.projectDir.parentFile.toURI()}maven"
		}
	}
	println "${project.projectDir.parentFile.toURI()}maven"
}